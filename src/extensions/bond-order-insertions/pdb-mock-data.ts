// chem_comp_bond table copied from 1udt_updated.cif from pdbe
//  split into separate arrays for each column for convenience
const compId: string[] = [
  "ALA",
  "ALA",
  "ALA",
  "ALA",
  "ALA",
  "ALA",
  "ALA",
  "ALA",
  "ALA",
  "ALA",
  "ALA",
  "ALA",
  "ARG",
  "ARG",
  "ARG",
  "ARG",
  "ARG",
  "ARG",
  "ARG",
  "ARG",
  "ARG",
  "ARG",
  "ARG",
  "ARG",
  "ARG",
  "ARG",
  "ARG",
  "ARG",
  "ARG",
  "ARG",
  "ARG",
  "ARG",
  "ARG",
  "ARG",
  "ARG",
  "ARG",
  "ARG",
  "ARG",
  "ASN",
  "ASN",
  "ASN",
  "ASN",
  "ASN",
  "ASN",
  "ASN",
  "ASN",
  "ASN",
  "ASN",
  "ASN",
  "ASN",
  "ASN",
  "ASN",
  "ASN",
  "ASN",
  "ASP",
  "ASP",
  "ASP",
  "ASP",
  "ASP",
  "ASP",
  "ASP",
  "ASP",
  "ASP",
  "ASP",
  "ASP",
  "ASP",
  "ASP",
  "ASP",
  "ASP",
  "CYS",
  "CYS",
  "CYS",
  "CYS",
  "CYS",
  "CYS",
  "CYS",
  "CYS",
  "CYS",
  "CYS",
  "CYS",
  "CYS",
  "CYS",
  "GLN",
  "GLN",
  "GLN",
  "GLN",
  "GLN",
  "GLN",
  "GLN",
  "GLN",
  "GLN",
  "GLN",
  "GLN",
  "GLN",
  "GLN",
  "GLN",
  "GLN",
  "GLN",
  "GLN",
  "GLN",
  "GLN",
  "GLU",
  "GLU",
  "GLU",
  "GLU",
  "GLU",
  "GLU",
  "GLU",
  "GLU",
  "GLU",
  "GLU",
  "GLU",
  "GLU",
  "GLU",
  "GLU",
  "GLU",
  "GLU",
  "GLU",
  "GLU",
  "GLY",
  "GLY",
  "GLY",
  "GLY",
  "GLY",
  "GLY",
  "GLY",
  "GLY",
  "GLY",
  "HIS",
  "HIS",
  "HIS",
  "HIS",
  "HIS",
  "HIS",
  "HIS",
  "HIS",
  "HIS",
  "HIS",
  "HIS",
  "HIS",
  "HIS",
  "HIS",
  "HIS",
  "HIS",
  "HIS",
  "HIS",
  "HIS",
  "HIS",
  "HIS",
  "HOH",
  "HOH",
  "ILE",
  "ILE",
  "ILE",
  "ILE",
  "ILE",
  "ILE",
  "ILE",
  "ILE",
  "ILE",
  "ILE",
  "ILE",
  "ILE",
  "ILE",
  "ILE",
  "ILE",
  "ILE",
  "ILE",
  "ILE",
  "ILE",
  "ILE",
  "ILE",
  "LEU",
  "LEU",
  "LEU",
  "LEU",
  "LEU",
  "LEU",
  "LEU",
  "LEU",
  "LEU",
  "LEU",
  "LEU",
  "LEU",
  "LEU",
  "LEU",
  "LEU",
  "LEU",
  "LEU",
  "LEU",
  "LEU",
  "LEU",
  "LEU",
  "LYS",
  "LYS",
  "LYS",
  "LYS",
  "LYS",
  "LYS",
  "LYS",
  "LYS",
  "LYS",
  "LYS",
  "LYS",
  "LYS",
  "LYS",
  "LYS",
  "LYS",
  "LYS",
  "LYS",
  "LYS",
  "LYS",
  "LYS",
  "LYS",
  "LYS",
  "LYS",
  "LYS",
  "MET",
  "MET",
  "MET",
  "MET",
  "MET",
  "MET",
  "MET",
  "MET",
  "MET",
  "MET",
  "MET",
  "MET",
  "MET",
  "MET",
  "MET",
  "MET",
  "MET",
  "MET",
  "MET",
  "PHE",
  "PHE",
  "PHE",
  "PHE",
  "PHE",
  "PHE",
  "PHE",
  "PHE",
  "PHE",
  "PHE",
  "PHE",
  "PHE",
  "PHE",
  "PHE",
  "PHE",
  "PHE",
  "PHE",
  "PHE",
  "PHE",
  "PHE",
  "PHE",
  "PHE",
  "PHE",
  "PRO",
  "PRO",
  "PRO",
  "PRO",
  "PRO",
  "PRO",
  "PRO",
  "PRO",
  "PRO",
  "PRO",
  "PRO",
  "PRO",
  "PRO",
  "PRO",
  "PRO",
  "PRO",
  "PRO",
  "SER",
  "SER",
  "SER",
  "SER",
  "SER",
  "SER",
  "SER",
  "SER",
  "SER",
  "SER",
  "SER",
  "SER",
  "SER",
  "THR",
  "THR",
  "THR",
  "THR",
  "THR",
  "THR",
  "THR",
  "THR",
  "THR",
  "THR",
  "THR",
  "THR",
  "THR",
  "THR",
  "THR",
  "THR",
  "TRP",
  "TRP",
  "TRP",
  "TRP",
  "TRP",
  "TRP",
  "TRP",
  "TRP",
  "TRP",
  "TRP",
  "TRP",
  "TRP",
  "TRP",
  "TRP",
  "TRP",
  "TRP",
  "TRP",
  "TRP",
  "TRP",
  "TRP",
  "TRP",
  "TRP",
  "TRP",
  "TRP",
  "TRP",
  "TRP",
  "TRP",
  "TRP",
  "TYR",
  "TYR",
  "TYR",
  "TYR",
  "TYR",
  "TYR",
  "TYR",
  "TYR",
  "TYR",
  "TYR",
  "TYR",
  "TYR",
  "TYR",
  "TYR",
  "TYR",
  "TYR",
  "TYR",
  "TYR",
  "TYR",
  "TYR",
  "TYR",
  "TYR",
  "TYR",
  "TYR",
  "VAL",
  "VAL",
  "VAL",
  "VAL",
  "VAL",
  "VAL",
  "VAL",
  "VAL",
  "VAL",
  "VAL",
  "VAL",
  "VAL",
  "VAL",
  "VAL",
  "VAL",
  "VAL",
  "VAL",
  "VAL",
  "VIA",
  "VIA",
  "VIA",
  "VIA",
  "VIA",
  "VIA",
  "VIA",
  "VIA",
  "VIA",
  "VIA",
  "VIA",
  "VIA",
  "VIA",
  "VIA",
  "VIA",
  "VIA",
  "VIA",
  "VIA",
  "VIA",
  "VIA",
  "VIA",
  "VIA",
  "VIA",
  "VIA",
  "VIA",
  "VIA",
  "VIA",
  "VIA",
  "VIA",
  "VIA",
  "VIA",
  "VIA",
  "VIA",
  "VIA",
  "VIA",
  "VIA",
  "VIA",
  "VIA",
  "VIA",
  "VIA",
  "VIA",
  "VIA",
  "VIA",
  "VIA",
  "VIA",
  "VIA",
  "VIA",
  "VIA",
  "VIA",
  "VIA",
  "VIA",
  "VIA",
  "VIA",
  "VIA",
  "VIA",
  "VIA",
  "VIA",
  "VIA",
  "VIA",
  "VIA",
  "VIA",
  "VIA",
  "VIA",
  "VIA",
  "VIA",
  "VIA",
];
const atomId1: string[] = [
  "N",
  "N",
  "N",
  "CA",
  "CA",
  "CA",
  "C",
  "C",
  "CB",
  "CB",
  "CB",
  "OXT",
  "N",
  "N",
  "N",
  "CA",
  "CA",
  "CA",
  "C",
  "C",
  "CB",
  "CB",
  "CB",
  "CG",
  "CG",
  "CG",
  "CD",
  "CD",
  "CD",
  "NE",
  "NE",
  "CZ",
  "CZ",
  "NH1",
  "NH1",
  "NH2",
  "NH2",
  "OXT",
  "N",
  "N",
  "N",
  "CA",
  "CA",
  "CA",
  "C",
  "C",
  "CB",
  "CB",
  "CB",
  "CG",
  "CG",
  "ND2",
  "ND2",
  "OXT",
  "N",
  "N",
  "N",
  "CA",
  "CA",
  "CA",
  "C",
  "C",
  "CB",
  "CB",
  "CB",
  "CG",
  "CG",
  "OD2",
  "OXT",
  "N",
  "N",
  "N",
  "CA",
  "CA",
  "CA",
  "C",
  "C",
  "CB",
  "CB",
  "CB",
  "SG",
  "OXT",
  "N",
  "N",
  "N",
  "CA",
  "CA",
  "CA",
  "C",
  "C",
  "CB",
  "CB",
  "CB",
  "CG",
  "CG",
  "CG",
  "CD",
  "CD",
  "NE2",
  "NE2",
  "OXT",
  "N",
  "N",
  "N",
  "CA",
  "CA",
  "CA",
  "C",
  "C",
  "CB",
  "CB",
  "CB",
  "CG",
  "CG",
  "CG",
  "CD",
  "CD",
  "OE2",
  "OXT",
  "N",
  "N",
  "N",
  "CA",
  "CA",
  "CA",
  "C",
  "C",
  "OXT",
  "N",
  "N",
  "N",
  "CA",
  "CA",
  "CA",
  "C",
  "C",
  "CB",
  "CB",
  "CB",
  "CG",
  "CG",
  "ND1",
  "ND1",
  "CD2",
  "CD2",
  "CE1",
  "CE1",
  "NE2",
  "OXT",
  "O",
  "O",
  "N",
  "N",
  "N",
  "CA",
  "CA",
  "CA",
  "C",
  "C",
  "CB",
  "CB",
  "CB",
  "CG1",
  "CG1",
  "CG1",
  "CG2",
  "CG2",
  "CG2",
  "CD1",
  "CD1",
  "CD1",
  "OXT",
  "N",
  "N",
  "N",
  "CA",
  "CA",
  "CA",
  "C",
  "C",
  "CB",
  "CB",
  "CB",
  "CG",
  "CG",
  "CG",
  "CD1",
  "CD1",
  "CD1",
  "CD2",
  "CD2",
  "CD2",
  "OXT",
  "N",
  "N",
  "N",
  "CA",
  "CA",
  "CA",
  "C",
  "C",
  "CB",
  "CB",
  "CB",
  "CG",
  "CG",
  "CG",
  "CD",
  "CD",
  "CD",
  "CE",
  "CE",
  "CE",
  "NZ",
  "NZ",
  "NZ",
  "OXT",
  "N",
  "N",
  "N",
  "CA",
  "CA",
  "CA",
  "C",
  "C",
  "CB",
  "CB",
  "CB",
  "CG",
  "CG",
  "CG",
  "SD",
  "CE",
  "CE",
  "CE",
  "OXT",
  "N",
  "N",
  "N",
  "CA",
  "CA",
  "CA",
  "C",
  "C",
  "CB",
  "CB",
  "CB",
  "CG",
  "CG",
  "CD1",
  "CD1",
  "CD2",
  "CD2",
  "CE1",
  "CE1",
  "CE2",
  "CE2",
  "CZ",
  "OXT",
  "N",
  "N",
  "N",
  "CA",
  "CA",
  "CA",
  "C",
  "C",
  "CB",
  "CB",
  "CB",
  "CG",
  "CG",
  "CG",
  "CD",
  "CD",
  "OXT",
  "N",
  "N",
  "N",
  "CA",
  "CA",
  "CA",
  "C",
  "C",
  "CB",
  "CB",
  "CB",
  "OG",
  "OXT",
  "N",
  "N",
  "N",
  "CA",
  "CA",
  "CA",
  "C",
  "C",
  "CB",
  "CB",
  "CB",
  "OG1",
  "CG2",
  "CG2",
  "CG2",
  "OXT",
  "N",
  "N",
  "N",
  "CA",
  "CA",
  "CA",
  "C",
  "C",
  "CB",
  "CB",
  "CB",
  "CG",
  "CG",
  "CD1",
  "CD1",
  "CD2",
  "CD2",
  "NE1",
  "NE1",
  "CE2",
  "CE3",
  "CE3",
  "CZ2",
  "CZ2",
  "CZ3",
  "CZ3",
  "CH2",
  "OXT",
  "N",
  "N",
  "N",
  "CA",
  "CA",
  "CA",
  "C",
  "C",
  "CB",
  "CB",
  "CB",
  "CG",
  "CG",
  "CD1",
  "CD1",
  "CD2",
  "CD2",
  "CE1",
  "CE1",
  "CE2",
  "CE2",
  "CZ",
  "OH",
  "OXT",
  "N",
  "N",
  "N",
  "CA",
  "CA",
  "CA",
  "C",
  "C",
  "CB",
  "CB",
  "CB",
  "CG1",
  "CG1",
  "CG1",
  "CG2",
  "CG2",
  "CG2",
  "OXT",
  "C34",
  "C34",
  "C34",
  "C34",
  "C33",
  "C33",
  "C33",
  "C32",
  "C32",
  "C32",
  "C30",
  "C30",
  "N29",
  "N28",
  "N28",
  "C31",
  "C31",
  "C31",
  "C24",
  "C24",
  "C23",
  "C23",
  "N22",
  "N22",
  "C21",
  "C21",
  "N26",
  "C9",
  "C9",
  "C8",
  "C8",
  "C7",
  "C7",
  "C6",
  "C6",
  "C5",
  "C5",
  "C4",
  "O3",
  "C2",
  "C2",
  "C2",
  "C1",
  "C1",
  "C1",
  "S10",
  "S10",
  "S10",
  "N14",
  "N14",
  "C19",
  "C19",
  "C19",
  "C18",
  "C18",
  "C18",
  "N17",
  "N17",
  "C20",
  "C20",
  "C20",
  "C16",
  "C16",
  "C16",
  "C15",
  "C15",
];
const atomId2: string[] = [
  "CA",
  "H",
  "H2",
  "C",
  "CB",
  "HA",
  "O",
  "OXT",
  "HB1",
  "HB2",
  "HB3",
  "HXT",
  "CA",
  "H",
  "H2",
  "C",
  "CB",
  "HA",
  "O",
  "OXT",
  "CG",
  "HB2",
  "HB3",
  "CD",
  "HG2",
  "HG3",
  "NE",
  "HD2",
  "HD3",
  "CZ",
  "HE",
  "NH1",
  "NH2",
  "HH11",
  "HH12",
  "HH21",
  "HH22",
  "HXT",
  "CA",
  "H",
  "H2",
  "C",
  "CB",
  "HA",
  "O",
  "OXT",
  "CG",
  "HB2",
  "HB3",
  "OD1",
  "ND2",
  "HD21",
  "HD22",
  "HXT",
  "CA",
  "H",
  "H2",
  "C",
  "CB",
  "HA",
  "O",
  "OXT",
  "CG",
  "HB2",
  "HB3",
  "OD1",
  "OD2",
  "HD2",
  "HXT",
  "CA",
  "H",
  "H2",
  "C",
  "CB",
  "HA",
  "O",
  "OXT",
  "SG",
  "HB2",
  "HB3",
  "HG",
  "HXT",
  "CA",
  "H",
  "H2",
  "C",
  "CB",
  "HA",
  "O",
  "OXT",
  "CG",
  "HB2",
  "HB3",
  "CD",
  "HG2",
  "HG3",
  "OE1",
  "NE2",
  "HE21",
  "HE22",
  "HXT",
  "CA",
  "H",
  "H2",
  "C",
  "CB",
  "HA",
  "O",
  "OXT",
  "CG",
  "HB2",
  "HB3",
  "CD",
  "HG2",
  "HG3",
  "OE1",
  "OE2",
  "HE2",
  "HXT",
  "CA",
  "H",
  "H2",
  "C",
  "HA2",
  "HA3",
  "O",
  "OXT",
  "HXT",
  "CA",
  "H",
  "H2",
  "C",
  "CB",
  "HA",
  "O",
  "OXT",
  "CG",
  "HB2",
  "HB3",
  "ND1",
  "CD2",
  "CE1",
  "HD1",
  "NE2",
  "HD2",
  "NE2",
  "HE1",
  "HE2",
  "HXT",
  "H1",
  "H2",
  "CA",
  "H",
  "H2",
  "C",
  "CB",
  "HA",
  "O",
  "OXT",
  "CG1",
  "CG2",
  "HB",
  "CD1",
  "HG12",
  "HG13",
  "HG21",
  "HG22",
  "HG23",
  "HD11",
  "HD12",
  "HD13",
  "HXT",
  "CA",
  "H",
  "H2",
  "C",
  "CB",
  "HA",
  "O",
  "OXT",
  "CG",
  "HB2",
  "HB3",
  "CD1",
  "CD2",
  "HG",
  "HD11",
  "HD12",
  "HD13",
  "HD21",
  "HD22",
  "HD23",
  "HXT",
  "CA",
  "H",
  "H2",
  "C",
  "CB",
  "HA",
  "O",
  "OXT",
  "CG",
  "HB2",
  "HB3",
  "CD",
  "HG2",
  "HG3",
  "CE",
  "HD2",
  "HD3",
  "NZ",
  "HE2",
  "HE3",
  "HZ1",
  "HZ2",
  "HZ3",
  "HXT",
  "CA",
  "H",
  "H2",
  "C",
  "CB",
  "HA",
  "O",
  "OXT",
  "CG",
  "HB2",
  "HB3",
  "SD",
  "HG2",
  "HG3",
  "CE",
  "HE1",
  "HE2",
  "HE3",
  "HXT",
  "CA",
  "H",
  "H2",
  "C",
  "CB",
  "HA",
  "O",
  "OXT",
  "CG",
  "HB2",
  "HB3",
  "CD1",
  "CD2",
  "CE1",
  "HD1",
  "CE2",
  "HD2",
  "CZ",
  "HE1",
  "CZ",
  "HE2",
  "HZ",
  "HXT",
  "CA",
  "CD",
  "H",
  "C",
  "CB",
  "HA",
  "O",
  "OXT",
  "CG",
  "HB2",
  "HB3",
  "CD",
  "HG2",
  "HG3",
  "HD2",
  "HD3",
  "HXT",
  "CA",
  "H",
  "H2",
  "C",
  "CB",
  "HA",
  "O",
  "OXT",
  "OG",
  "HB2",
  "HB3",
  "HG",
  "HXT",
  "CA",
  "H",
  "H2",
  "C",
  "CB",
  "HA",
  "O",
  "OXT",
  "OG1",
  "CG2",
  "HB",
  "HG1",
  "HG21",
  "HG22",
  "HG23",
  "HXT",
  "CA",
  "H",
  "H2",
  "C",
  "CB",
  "HA",
  "O",
  "OXT",
  "CG",
  "HB2",
  "HB3",
  "CD1",
  "CD2",
  "NE1",
  "HD1",
  "CE2",
  "CE3",
  "CE2",
  "HE1",
  "CZ2",
  "CZ3",
  "HE3",
  "CH2",
  "HZ2",
  "CH2",
  "HZ3",
  "HH2",
  "HXT",
  "CA",
  "H",
  "H2",
  "C",
  "CB",
  "HA",
  "O",
  "OXT",
  "CG",
  "HB2",
  "HB3",
  "CD1",
  "CD2",
  "CE1",
  "HD1",
  "CE2",
  "HD2",
  "CZ",
  "HE1",
  "CZ",
  "HE2",
  "OH",
  "HH",
  "HXT",
  "CA",
  "H",
  "H2",
  "C",
  "CB",
  "HA",
  "O",
  "OXT",
  "CG1",
  "CG2",
  "HB",
  "HG11",
  "HG12",
  "HG13",
  "HG21",
  "HG22",
  "HG23",
  "HXT",
  "C33",
  "H341",
  "H342",
  "H343",
  "C32",
  "H331",
  "H332",
  "C30",
  "H321",
  "H322",
  "N29",
  "C25",
  "N28",
  "C31",
  "C24",
  "H311",
  "H312",
  "H313",
  "C23",
  "C25",
  "O27",
  "N22",
  "C21",
  "H22",
  "N26",
  "C9",
  "C25",
  "C8",
  "C4",
  "C7",
  "H8",
  "C6",
  "S10",
  "C5",
  "H6",
  "C4",
  "H5",
  "O3",
  "C2",
  "C1",
  "H21",
  "H22A",
  "H11",
  "H12",
  "H13",
  "O11",
  "O12",
  "N14",
  "C19",
  "C15",
  "C18",
  "H191",
  "H192",
  "N17",
  "H181",
  "H182",
  "C20",
  "C16",
  "H201",
  "H202",
  "H203",
  "C15",
  "H161",
  "H162",
  "H151",
  "H152",
];
export type ValueOrderStrings =
  | "sing"
  | "doub"
  | "trip"
  | "quad"
  | "arom"
  | "poly"
  | "delo"
  | "pi";
const valueOrder: ValueOrderStrings[] = [
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "doub",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "doub",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "doub",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "doub",
  "sing",
  "sing",
  "sing",
  "sing",
  "doub",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "doub",
  "sing",
  "sing",
  "sing",
  "sing",
  "doub",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "doub",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "doub",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "doub",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "doub",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "doub",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "doub",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "doub",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "doub",
  "doub",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "doub",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "doub",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "doub",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "doub",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "doub",
  "sing",
  "sing",
  "sing",
  "sing",
  "doub",
  "sing",
  "sing",
  "sing",
  "doub",
  "sing",
  "doub",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "doub",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "doub",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "doub",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "doub",
  "sing",
  "sing",
  "sing",
  "sing",
  "doub",
  "sing",
  "sing",
  "sing",
  "doub",
  "sing",
  "sing",
  "sing",
  "sing",
  "doub",
  "sing",
  "doub",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "doub",
  "sing",
  "sing",
  "sing",
  "sing",
  "doub",
  "sing",
  "sing",
  "sing",
  "doub",
  "sing",
  "doub",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "doub",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "doub",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "doub",
  "doub",
  "sing",
  "sing",
  "sing",
  "doub",
  "sing",
  "sing",
  "doub",
  "sing",
  "sing",
  "sing",
  "doub",
  "sing",
  "sing",
  "sing",
  "doub",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "doub",
  "doub",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
  "sing",
];
export type PdbxAromaticFlagStrings = "n" | "y";
const pdbxAromaticFlag: PdbxAromaticFlagStrings[] = [
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "y",
  "y",
  "y",
  "n",
  "y",
  "n",
  "y",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "y",
  "y",
  "y",
  "n",
  "y",
  "n",
  "y",
  "n",
  "y",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "y",
  "y",
  "y",
  "n",
  "y",
  "y",
  "y",
  "n",
  "y",
  "y",
  "n",
  "y",
  "n",
  "y",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "y",
  "y",
  "y",
  "n",
  "y",
  "n",
  "y",
  "n",
  "y",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "y",
  "y",
  "y",
  "n",
  "y",
  "n",
  "n",
  "n",
  "y",
  "y",
  "n",
  "y",
  "y",
  "n",
  "y",
  "y",
  "y",
  "y",
  "y",
  "y",
  "n",
  "y",
  "n",
  "y",
  "n",
  "y",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
];
export type PdbxStereoConfigStrings = "e" | "z" | "n";
const pdbxStereoConfig: PdbxStereoConfigStrings[] = [
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
];
const pdbxOrdinal: number[] = [
  1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,
  13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 1, 2, 3, 4, 5, 6, 7,
  8, 9, 10, 11, 12, 13, 14, 15, 16, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
  14, 15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1, 2, 3, 4, 5, 6, 7, 8, 9,
  10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,
  13, 14, 15, 16, 17, 18, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9,
  10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 1, 2, 1, 2, 3, 4, 5, 6, 7, 8,
  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 1, 2, 3, 4, 5, 6, 7, 8, 9,
  10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
  11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 1, 2, 3, 4, 5, 6, 7,
  8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
  11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 1, 2, 3, 4, 5, 6, 7, 8, 9,
  10, 11, 12, 13, 14, 15, 16, 17, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1,
  2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 1, 2, 3, 4, 5, 6, 7, 8, 9,
  10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 1,
  2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,
  23, 24, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 1, 2,
  3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
  24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,
  43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
  62, 63, 64, 65, 66,
];

export const mockData = {
  compId,
  atomId1,
  atomId2,
  valueOrder,
  pdbxAromaticFlag,
  pdbxStereoConfig,
  pdbxOrdinal,
};
